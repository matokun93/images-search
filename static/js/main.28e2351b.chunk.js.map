{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","photos","setPhotos","isLoading","setIsLoading","initialValues","search","onSubmit","values","a","axios","get","headers","then","response","data","results","className","name","placeholder","icon","faMagnifyingGlass","map","photo","onClick","url","links","html","window","open","src","urls","regular","description","alt_description","join","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4VAuFeA,EA7EH,WACV,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAEA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEA,OACE,gCACE,iCAyBE,cAAC,IAAD,CACEC,cAAe,CAAEC,OAAQ,IACzBC,SAAQ,uCACN,WAAOC,GAAP,SAAAC,EAAA,6DACEL,GAAa,GADf,SAEQM,IAAMC,IAAN,mEAAsEH,EAAOF,QAAU,CAC3FM,QAAS,CACP,cAAiB,2DAGlBC,MAAK,SAAAC,GAAQ,OAAIZ,EAAUY,EAASC,KAAKC,YACzCH,KAAKT,GAAa,IARvB,2CADM,sDAFV,SAeE,cAAC,IAAD,UACE,sBAAKa,UAAU,eAAf,UACE,cAAC,IAAD,CAAOC,KAAK,SAASC,YAAY,WACjC,wBAAQF,UAAU,gBAAlB,SACE,cAAC,IAAD,CAAiBG,KAAMC,iBAMjC,qBAAKJ,UAAU,YAAf,SAEId,EACI,qBAAKc,UAAU,iBAAf,SACA,2DAEA,qBAAKA,UAAU,SAAf,SACChB,EAAOqB,KAAI,SAAAC,GAAK,OACf,0BAAwBC,QAAS,kBA/D5BC,EA+D4CF,EAAMG,MAAMC,KA/DhDC,OAAOC,KAAKJ,GAArB,IAACA,GA+DL,UACE,qBAAKK,IAAKP,EAAMQ,KAAKC,UACrB,kCAAK,CAACT,EAAMU,YAAaV,EAAMW,iBAAiBC,KAAK,KAArD,SAFYZ,EAAMa,eC/DrBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.28e2351b.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { Formik, Form, Field } from 'formik'\nimport './Styles/header.css'\nimport './Styles/content.css'\nimport './Styles/article.css'\nimport { faMagnifyingGlass } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport axios from 'axios'\n\n\nconst App = () => {\n  const [photos, setPhotos] = useState([])\n  const openPhoto = (url) => window.open(url)\n  const [isLoading, setIsLoading] = useState(false)\n\n  return (\n    <div>\n      <header>\n        {/* <Formik\n          initialValues={{ search: '' }}\n          onSubmit={async values => {\n            const response = await fetch(`https://api.unsplash.com/search/photos?per_page=20&query=${values.search}`, {\n              headers: {\n                'Authorization': 'Client-ID rXPkNgsB29-uynn0vY_HuzFyCETLXKVj42CELIlyQBs',\n              }\n            })\n            const data = await response.json()\n            setPhotos(data.results)\n          }}\n        > */}\n        {/* <Formik\n          initialValues={{ search: '' }}\n          onSubmit={\n            async values => await axios.get(`https://api.unsplash.com/search/photos?per_page=20&query=${values.search}`, {\n              headers: {\n                'Authorization': 'Client-ID rXPkNgsB29-uynn0vY_HuzFyCETLXKVj42CELIlyQBs'\n              }\n            })\n              .then(response => setPhotos(response.data.results))\n              .then(setIsLoading(false))\n          }\n        > */}\n        <Formik\n          initialValues={{ search: '' }}\n          onSubmit={\n            async (values) => {\n              setIsLoading(true)\n              await axios.get(`https://api.unsplash.com/search/photos?per_page=20&query=${values.search}`, {\n                headers: {\n                  'Authorization': 'Client-ID rXPkNgsB29-uynn0vY_HuzFyCETLXKVj42CELIlyQBs'\n                }\n              })\n                .then(response => setPhotos(response.data.results))\n                .then(setIsLoading(false))\n            }\n          }\n        >\n          <Form>\n            <div className='form-content'>\n              <Field name='search' placeholder='Buscar' />\n              <button className='submit-button'>\n                <FontAwesomeIcon icon={faMagnifyingGlass} />\n              </button>\n            </div>\n          </Form>\n        </Formik>\n      </header>\n      <div className='container'>\n        {\n          isLoading\n            ? <div className='loading-screen'>\n              <h2>Cargando im√°genes...</h2>\n            </div>\n            : <div className='center'>\n              {photos.map(photo =>\n                <article key={photo.id} onClick={() => openPhoto(photo.links.html)}>\n                  <img src={photo.urls.regular} />\n                  <p> {[photo.description, photo.alt_description].join('-')} </p>\n                </article>\n              )}\n            </div>\n        }\n      </div>\n    </div >\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}